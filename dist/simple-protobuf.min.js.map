{"version":3,"sources":["lib/prelude.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../src/index","../src/reader.js","../src/reader_buffer.js","../src/roots.js","../src/util/core.js","../src/util/longbits.js","../src/writer.js","../src/writer_buffer.js"],"names":["undefined","modules","cache","entries","protobuf","1","require","module","exports","base64","length","string","p","n","Math","ceil","b64","Array","s64","i","encode","buffer","start","end","t","parts","chunk","j","b","push","String","fromCharCode","apply","slice","join","invalidEncoding","decode","offset","c","charCodeAt","Error","test","factory","writeFloat_ieee754","writeUint","val","buf","pos","sign","isNaN","round","exponent","floor","log","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeFloat_f32_cpy","f32","f8b","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","f64","le","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","Float32Array","Uint8Array","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","inquire","moduleName","mod","eval","Object","keys","e","alloc","size","SIZE","MAX","slab","call","utf8","len","read","write","c1","c2","configure","util","_configure","Writer","BufferWriter","Reader","BufferReader","build","roots","LongBits","indexOutOfRange","reader","writeLength","RangeError","this","create","Buffer","isBuffer","create_array","value","isArray","readLongVarint","bits","readFixed32_end","readFixed64","prototype","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","float","double","bytes","constructor","skip","skipType","wireType","BufferReader_","fn","Long","merge","int64","uint64","sint64","zzDecode","fixed64","sfixed64","utf8Slice","min","toString","dst","src","ifNotSet","newError","name","CustomError","message","properties","defineProperty","get","captureStackTrace","stack","pool","isNode","global","process","versions","node","window","self","emptyArray","freeze","emptyObject","isInteger","Number","isFinite","isString","isObject","isset","isSet","obj","prop","hasOwnProperty","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","key2Re","key32Re","key64Re","longToHash","from","toHash","zeroHash","longFromHash","hash","unsigned","fromHash","LongLongBits","fromBits","toNumber","lcFirst","str","toLowerCase","substring","ProtocolError","oneOfGetter","fieldNames","fieldMap","oneOfSetter","toJSONOptions","longs","enums","json","encoding","allocUnsafe","zero","zzEncode","fromNumber","parseInt","fromString","low","high","toLong","mask","part0","part1","part2","Op","next","noop","State","writer","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","set","fork","reset","ldelim","finish","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength","$r","$module","define","amd","isLong"],"mappings":"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","file":"simple-protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\n\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\n    // sources through a conflict-free require shim and is again wrapped within an iife that\n    // provides a minification-friendly `undefined` var plus a global \"use strict\" directive\n    // so that minification can remove the directives of each module.\n\n    function $r(name) {\n        var $module = cache[name];\n        if (!$module)\n            modules[name][0].call($module = cache[name] = { exports: {} }, $r, $module, $module.exports);\n        return $module.exports;\n    }\n\n    var protobuf = $r(entries[0]);\n\n    // Expose globally\n    protobuf.util.global.protobuf = protobuf;\n\n    // Be nice to AMD\n    if (typeof define === \"function\" && define.amd)\n        define([\"long\"], function(Long) {\n            if (Long && Long.isLong) {\n                protobuf.util.Long = Long;\n                protobuf.configure();\n            }\n            return protobuf;\n        });\n\n    // Be nice to CommonJS\n    if (typeof module === \"object\" && module && module.exports)\n        module.exports = protobuf;\n\n})/* end of prelude */","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"simple\";\n\n// Serialization\nprotobuf.Writer       = require(12);\nprotobuf.BufferWriter = require(13);\nprotobuf.Reader       = require(7);\nprotobuf.BufferReader = require(8);\n\n// Utility\nprotobuf.util         = require(10);\nprotobuf.roots        = require(9);\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(10);\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.LongBits.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(7);\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(10);\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n","\"use strict\";\nvar util = exports;\n\n// converts to / from base64 encoded strings\nutil.base64 = require(1);\n\n// float handling accross browsers\nutil.float = require(2);\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(3);\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(5);\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(4);\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(11);\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n    && global\n    && global.process\n    && global.process.versions\n    && global.process.versions.node);\n\n/**\n* Global object reference.\n* @memberof util\n* @type {Object}\n*/\nutil.global = util.isNode && global\n    || typeof window !== \"undefined\" && window\n    || typeof self !== \"undefined\" && self\n    || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */[]; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n    /**\n     * Checks if a property on a message is considered to be present.\n     * @param {Object} obj Plain object or message instance\n     * @param {string} prop Property name\n     * @returns {boolean} `true` if considered to be present, otherwise `false`\n     */\n    util.isSet = function isSet(obj, prop) {\n        var value = obj[prop];\n        if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n            return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n        return false;\n    };\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function () {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.LongLongBits.Long)\n        return util.LongBits.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function () { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function () { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function () { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function (name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function () {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(10);\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\n LongBits.Long = util.inquire(\"long\");\n\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.LongLongBits.Long)\n            value = util.LongLongBits.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.LongLongBits.Long\n        ? new util.LongLongBits.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(10);\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(12);\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(10);\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n"],"sourceRoot":"."}